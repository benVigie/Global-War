<?php		/**	*	Essaye de loguer un utilisateur et se souvient de lui en $_SESSION	*	*	@param: $db => une reference sur la ressource MySQL ouverte	*	@param: $n => Le pseudo du type	*	@param: $p => Son mot de passe hashe	*	@return: True en cas de succes, un message d'erreur sinon	*/	function 	logUser($db, $n, $p) {		$user = $db->GetRows("SELECT `players`.`player_id` FROM `players` WHERE `players`.`player_nick` = '$n' AND `players`.`player_pass` = '$p'");		if (isset($user[0])) {			$_SESSION['user-id'] = $user[0]['player_id'];			return (true);		}		return ('Mauvais login / mot de passe');	}	/**	*	Enregistre un nouvel utilisateur en BDD et se souvient de lui en $_SESSION	*	*	@param: $db => une reference sur la ressource MySQL ouverte	*	@param: $n => Le pseudo du type	*	@param: $p => Son mot de passe hashe	*	@param: $m => Son adresse email	*	@return: True en cas de succes, un message d'erreur sinon	*/	function 	inscription($db, $n, $p, $m) {		$exist = $db->GetRows("SELECT `players`.`player_id` FROM `players` WHERE `players`.`player_nick` = '$n'");		if ($exist === null) {			if ($db->Execute("INSERT INTO `players` (`player_id`, `player_nick`, `player_pass`, `player_mail`, `player_score`, `player_notification`) VALUES (NULL, '$n', '$p', '$m', '0', '1');") === false)				return ("Un probleme nous emepeche de vous inscrire. Merci de reessayer plus tard.");			$id = mysql_insert_id();			if (isset($_FILES['picture']))				createVignette($_FILES['picture'], ('images/users/' . $id . '.jpg'), 75, 75);			$_SESSION['user-id'] = $id;			return (true);		}		else			return ('Ce nom de joueur existe d&eacute;j&agrave; :/');	}	/**	*	Cette fonction va essayer de loguer l'utilisateur (login OU inscription)	*		si les données sont bonnes.	*	*	@param: $db => une reference sur la ressource MySQL ouverte	*	@return: True en cas de succes, un message d'erreur sinon	*/	function	tryToLog($db) {		// Si rien, on se casse		if ($_POST['password'] == '' || $_POST['nick'] == '')			return ("En fait, faut remplir les champs...");		$pwd = hash('sha256', $_POST['password']);		$nick = myBDD::SecureInput($_POST['nick']);		if (isset($_POST['email'])) {			$email = myBDD::SecureInput($_POST['email']);			return (inscription($db, $nick, $pwd, $email));		}		else			return (logUser($db, $nick, $pwd));	}	/**	*	Genere une petite imagette pour la photo de profil	*	*	@param: $file => l'element $_FILE de l'image uploade	*	@param: $dst => Le chemin d'enregistrement de l'image	*	@param: $dst_w => Largeur de l'image voulue 	*	@param: $dst_h => Hauteur de l'image voulue	*	@return: True en cas de succes, une String d'erreur sinon	*/	function	createVignette($file, $dst, $dst_w = 50, $dst_h = 50) {		$src = $file['tmp_name'];				if (empty($file['size']) || $file['size'] > 2000000)			return ('Image trop grosse !');				// Lit les dimensions de l'image		$size = GetImageSize($src);		$src_w = $size[0];		$src_h = $size[1];				// Teste les dimensions tenant dans la zone		$test_h = round(($dst_w / $src_w) * $src_h);		$test_w = round(($dst_h / $src_h) * $src_w);		// Sinon teste quel redimensionnement tient dans la zone		$x = $y = 0;		$sizeCpy = $src_w;		if ($src_w > $src_h)		{			$sizeCpy = $src_h;			$x = ($src_w - $src_h) / 2;		}		else if ($src_w < $src_h)		{			$sizeCpy = $src_w;			$y = ($src_h - $src_w) / 2;		}				// Crée une image vierge aux bonnes dimensions		$dst_im = ImageCreateTrueColor($dst_w, $dst_h);		// Copie dedans l'image initiale redimensionnée		if ($file['type'] == 'image/jpeg')			$src_im = imagecreatefromjpeg($src);		else if ($file['type'] == 'image/png')			$src_im = imagecreatefrompng($src);		else if ($file['type'] == 'image/gif')			$src_im = imagecreatefromgif($src);		else if ($file['type'] == 'image/bmp')			$src_im = imagecreatefromwbmp($src);		else			return ('Format d\'image non supporté !');		//$src_im = ImageCreateFromJpeg($src);		ImageCopyResampled($dst_im, $src_im, 0, 0, $x, $y, $dst_w, $dst_h, $sizeCpy, $sizeCpy);		// Sauve la nouvelle image		ImageJpeg($dst_im, $dst, 85);		// Détruis les tampons		ImageDestroy($src_im);		ImageDestroy($dst_im);				return (true);	}?>